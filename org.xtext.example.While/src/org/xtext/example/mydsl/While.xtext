grammar org.xtext.example.mydsl.While with org.eclipse.xtext.common.Terminals

generate while "http://www.xtext.org/example/mydsl/While"


Model:
	while=Program;
	

//*******************************************************************
//****************    UNITES LEXICALES          *********************
//*******************************************************************

terminal VARIABLE:
	('A'..'Z')(('0'..'9')|('a'..'z')|('A'..'Z'))*;

terminal SYMBOLE:
	('a'..'z')(('0'..'9')|('a'..'z')|('A'..'Z'))*;

terminal PONCTUATION:
	','|';'|':'|'('|')'
;
	
LC :
	'\t' | ENDOFFILE | ' '
;

terminal ENDOFFILE:
	'\r' | '\n' | '\r\n'
;
	
//*******************************************************************
//************   SYNTAXE DES PROGRAMMES         *********************
//*******************************************************************
 
 Program :
 	(Function (ENDOFFILE)?)*
 ;
 
 Function :
 	'function' LC SYMBOLE ':' LC Definition LC?
 ;
 
 Definition :
 	'read' LC Input LC '%'LC? Commands LC? '%' LC?'write' LC? Output
 ;
 
 Input :
 	//VARIABLE ',' Input | VARIABLE
 	VARIABLE(',' Input)?
 ;
 
 Output :
 	//VARIABLE ',' Output | VARIABLE
 	VARIABLE(',' Output)?
 ;
 
//*******************************************************************
//*************   SYNTAXE DES COMMANDES SIMPLES         *************
//*******************************************************************
 
 Vars :
 	VARIABLE ',' Vars | VARIABLE
 ;
 
//*******************************************************************
//*************   SYNTAXE DES EXPRESSIONS SIMPLES       *************
//*******************************************************************
 
 Expr :
 	ExprSimple
 	//ExprSimple | ExprAnd
 ;
 
 ExprSimple :
 	'nil' | VARIABLE | SYMBOLE |
 	'(' 'cons' Lexpr ')' | '(' 'list' Lexpr ')' |
 	'(' 'hd' LC Expr ')' | '(' 'tl' LC Expr ')' |
 	'(' SYMBOLE Lexpr ')'
 ;
 
  Lexpr :
 	LC Expr (Lexpr)?  
 ;
 
 //*******************************************************************
//*************   SYNTAXE DES EXPRESSIONS LOGIQUES      **************
//********************************************************************

 ExprAnd :
 	(ExprOr)('and' LC ExprAnd)?
 ;
 
 ExprOr : 
 	(ExprNot)('or' LC ExprOr)?
 ;
 
 ExprNot : ///marche
 	'not' LC ExprEq | ExprEq
 ;
 
 ExprEq : //marche
 	ExprSimple '=?' ExprSimple | '(' Expr ')'
 ;
 
//********************************************************************
//********    SYNTAXE DES COMMANDES SIMPLES  / COMPLEXES     *********
//********************************************************************
 
Commands :
	//=>(Command ';' Commands) | Command
	Command(';'Commands)?
;

Command :
	'nop' | Vars ':=' Exprs |
	'while' LC Expr LC 'do' LC Commands LC 'od' |
	'for' LC Expr LC 'do' LC Commands LC 'od' |
	'if' LC Expr LC 'then' LC Commands LC 'else' LC Commands LC 'fi' 
	//Confort
	//'foreach' LC Expr LC 'in' LC Expr LC 'do' LC Commands  LC 'od'
	//'if' LC Expr LC 'then' LC Commands  LC 'fi'	
;

Exprs :
	//=>(Expr ',' Exprs) | Expr
	Expr(',' Exprs)?
;

//********************************************************************
//**************    SYNTAXE DES COMMANDES COMPLEXES     **************
//********************************************************************
