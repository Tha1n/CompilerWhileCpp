/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xtext.example.mydsl.myDsl.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for(m: resource.allContents.toIterable.filter(Model)) {
			fsa.generateFile("PP.wh", m.compile)
		}
	}
	
	def compile (Model m)'''
		«m.programme.compile»
	'''
	
	def compile (Program p)'''
		«FOR f: p.fonctions»
			«f.compile»
		«ENDFOR»
	'''
	
	def compile (Function f)'''
		function «f.nom»:
		«f.definition.compile»
	'''
	
	def compile (Definition d)'''
		read «d.inputs.compile»
		%
		«d.commandes.compile»
		%
		write «d.outputs.compile»
	'''
	
	def compile (Input i)'''
		«FOR in : i.varIn»«in»«IF i.varIn.indexOf(in)!=i.varIn.size-1», «ENDIF»«ENDFOR»
	'''
	
	def compile (Commands c)'''
		«FOR cm: c.commande»
			«cm.compile»
		«ENDFOR»
	'''
	def compile (Output o)'''
		«FOR in : o.varOut»«in»«IF o.varOut.indexOf(in)!=o.varOut.size-1»,«ENDIF»«ENDFOR»
	'''
	
	def compile(Command c)'''
		«IF c.nop!=null»nop ;«ENDIF»
		«IF c.vars!=null»«c.vars.compile»«c.exprs.compile»«ENDIF»
		«IF c.cmdWhile!=null»«c.cmdWhile.compile»«ENDIF»
		«IF c.cmdIf!=null»«c.cmdIf.compile»«ENDIF»
		«IF c.cmdForEach!=null»«c.cmdForEach.compile»«ENDIF»
	'''
	
	def compile(CommandWhile c)'''
		«IF c.w!=null»while «ELSE»for «ENDIF»«/*c.expr.compile*/» do
			«c.cmds.compile»
		od
		
	'''
	
	def compile(CommandIf c)'''
		if «/*c.cond.compile*/» then
			«c.cmdsThen.compile»
		«IF c.cmdsElse!=null»else
			«c.cmdsElse.compile»
		«ENDIF»
		fi
	'''
	
	def compile(CommandForEach c)'''
		foreach «/*c.elem.compile*/» in «/*c.ensemb.compile*/» do
			«c.cmds.compile»
		od
	'''
	
	def compile(Vars v)'''
		«FOR in : v.varGen»«in»«IF v.varGen.indexOf(in)!=v.varGen.size-1»,«ELSE»:=«ENDIF»«ENDFOR»
	'''
	
	def compile(Exprs e)'''
		«FOR in : e.expGen»«in.compile»«IF e.expGen.indexOf(in)!=e.expGen.size-1»,«ELSE»«ENDIF»«ENDFOR»
	'''
	
	def compile (Expr ex)'''
		«IF ex.exprSimp!=null»«ex.exprSimp.compile»«ENDIF»
		«IF ex.exprAnd!=null»«ex.exprAnd.compile»«ENDIF»
	'''
	
	def compile (ExprSimple ex)'''
		«IF ex.nil!=null»nil«ENDIF»
		«IF ex.vari!=null»«ex.vari»«ENDIF»
		«IF ex.symb!=null»(cons «ex.symb»«ENDIF»
		«IF ex.exprCons!=null»(cons «ex.exprConsAtt.compile»)«ENDIF»
		«IF ex.exprList!=null»(list «ex.exprListAtt.compile»)«ENDIF»
		«IF ex.exprHead!=null»(hd «ex.exprHeadAtt.compile»)«ENDIF»
		«IF ex.exprTail!=null»(tl «ex.exprTailAtt.compile»)«ENDIF»
		«IF ex.nomSymb!=null»(«ex.nomSymb» «ex.symbAtt.compile»)«ENDIF»
	'''
	
	def compile (ExprAnd ex)'''
		«ex.exprOr.compile»
		«IF ex.exprAnd!=null»«ex.exprAndAtt.compile»«ENDIF»
	'''
	
	def compile (ExprOr ex)'''
		«ex.exprNot.compile»
		«IF ex.exprOr!=null»«ex.exprOrAtt.compile»«ENDIF»
	'''
	
	def compile (ExprNot ex)'''
		«IF ex.not!=null»not «ENDIF»
		«ex.exprEq.compile»
	'''
	
	def compile (ExprEq ex)'''
		«IF ex.expr!=null»(«ex.expr.compile»)«ELSE»«ex.exprSim1.compile» =? «ex.exprSim2.compile»«ENDIF»
	'''
}
