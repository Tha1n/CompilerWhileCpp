/*
 * generated by Xtext
 */
package org.xtext.example.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class WhileCppGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Assignment cFonctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFonctionsFunctionParserRuleCall_0 = (RuleCall)cFonctionsAssignment.eContents().get(0);
		
		////Programme
		//Program:
		//	fonctions+=Function*;
		@Override public ParserRule getRule() { return rule; }

		//fonctions+=Function*
		public Assignment getFonctionsAssignment() { return cFonctionsAssignment; }

		//Function
		public RuleCall getFonctionsFunctionParserRuleCall_0() { return cFonctionsFunctionParserRuleCall_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNomSYMBOLTerminalRuleCall_1_0 = (RuleCall)cNomAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		
		////Fonction
		//Function:
		//	"function" nom=SYMBOL ":" definition=Definition;
		@Override public ParserRule getRule() { return rule; }

		//"function" nom=SYMBOL ":" definition=Definition
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//nom=SYMBOL
		public Assignment getNomAssignment_1() { return cNomAssignment_1; }

		//SYMBOL
		public RuleCall getNomSYMBOLTerminalRuleCall_1_0() { return cNomSYMBOLTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//definition=Definition
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }

		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_3_0() { return cDefinitionDefinitionParserRuleCall_3_0; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInputsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputsInputParserRuleCall_1_0 = (RuleCall)cInputsAssignment_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandesCommandsParserRuleCall_3_0 = (RuleCall)cCommandesAssignment_3.eContents().get(0);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cWriteKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutputsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutputsOutputParserRuleCall_6_0 = (RuleCall)cOutputsAssignment_6.eContents().get(0);
		
		////Définition de fonction
		//Definition:
		//	"read" inputs=Input "%" commandes=Commands "%" "write" outputs=Output;
		@Override public ParserRule getRule() { return rule; }

		//"read" inputs=Input "%" commandes=Commands "%" "write" outputs=Output
		public Group getGroup() { return cGroup; }

		//"read"
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }

		//inputs=Input
		public Assignment getInputsAssignment_1() { return cInputsAssignment_1; }

		//Input
		public RuleCall getInputsInputParserRuleCall_1_0() { return cInputsInputParserRuleCall_1_0; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }

		//commandes=Commands
		public Assignment getCommandesAssignment_3() { return cCommandesAssignment_3; }

		//Commands
		public RuleCall getCommandesCommandsParserRuleCall_3_0() { return cCommandesCommandsParserRuleCall_3_0; }

		//"%"
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }

		//"write"
		public Keyword getWriteKeyword_5() { return cWriteKeyword_5; }

		//outputs=Output
		public Assignment getOutputsAssignment_6() { return cOutputsAssignment_6; }

		//Output
		public RuleCall getOutputsOutputParserRuleCall_6_0() { return cOutputsOutputParserRuleCall_6_0; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVarInAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVarInVARIABLETerminalRuleCall_0_0_0 = (RuleCall)cVarInAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cVarInAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarInVARIABLETerminalRuleCall_1_0 = (RuleCall)cVarInAssignment_1.eContents().get(0);
		
		////Input de la fonction
		//Input:
		//	(varIn+=VARIABLE ",")* varIn+=VARIABLE;
		@Override public ParserRule getRule() { return rule; }

		//(varIn+=VARIABLE ",")* varIn+=VARIABLE
		public Group getGroup() { return cGroup; }

		//(varIn+=VARIABLE ",")*
		public Group getGroup_0() { return cGroup_0; }

		//varIn+=VARIABLE
		public Assignment getVarInAssignment_0_0() { return cVarInAssignment_0_0; }

		//VARIABLE
		public RuleCall getVarInVARIABLETerminalRuleCall_0_0_0() { return cVarInVARIABLETerminalRuleCall_0_0_0; }

		//","
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }

		//varIn+=VARIABLE
		public Assignment getVarInAssignment_1() { return cVarInAssignment_1; }

		//VARIABLE
		public RuleCall getVarInVARIABLETerminalRuleCall_1_0() { return cVarInVARIABLETerminalRuleCall_1_0; }
	}

	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVarOutAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVarOutVARIABLETerminalRuleCall_0_0_0 = (RuleCall)cVarOutAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cVarOutAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarOutVARIABLETerminalRuleCall_1_0 = (RuleCall)cVarOutAssignment_1.eContents().get(0);
		
		////Output de la fonction
		////varOut = variables Sorties
		//Output:
		//	(varOut+=VARIABLE ",")* varOut+=VARIABLE;
		@Override public ParserRule getRule() { return rule; }

		//(varOut+=VARIABLE ",")* varOut+=VARIABLE
		public Group getGroup() { return cGroup; }

		//(varOut+=VARIABLE ",")*
		public Group getGroup_0() { return cGroup_0; }

		//varOut+=VARIABLE
		public Assignment getVarOutAssignment_0_0() { return cVarOutAssignment_0_0; }

		//VARIABLE
		public RuleCall getVarOutVARIABLETerminalRuleCall_0_0_0() { return cVarOutVARIABLETerminalRuleCall_0_0_0; }

		//","
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }

		//varOut+=VARIABLE
		public Assignment getVarOutAssignment_1() { return cVarOutAssignment_1; }

		//VARIABLE
		public RuleCall getVarOutVARIABLETerminalRuleCall_1_0() { return cVarOutVARIABLETerminalRuleCall_1_0; }
	}

	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVarGenAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVarGenVARIABLETerminalRuleCall_0_0_0 = (RuleCall)cVarGenAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cVarGenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarGenVARIABLETerminalRuleCall_1_0 = (RuleCall)cVarGenAssignment_1.eContents().get(0);
		
		////Variables
		////varGen = variables générales
		//Vars:
		//	(varGen+=VARIABLE ",")* varGen+=VARIABLE;
		@Override public ParserRule getRule() { return rule; }

		//(varGen+=VARIABLE ",")* varGen+=VARIABLE
		public Group getGroup() { return cGroup; }

		//(varGen+=VARIABLE ",")*
		public Group getGroup_0() { return cGroup_0; }

		//varGen+=VARIABLE
		public Assignment getVarGenAssignment_0_0() { return cVarGenAssignment_0_0; }

		//VARIABLE
		public RuleCall getVarGenVARIABLETerminalRuleCall_0_0_0() { return cVarGenVARIABLETerminalRuleCall_0_0_0; }

		//","
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }

		//varGen+=VARIABLE
		public Assignment getVarGenAssignment_1() { return cVarGenAssignment_1; }

		//VARIABLE
		public RuleCall getVarGenVARIABLETerminalRuleCall_1_0() { return cVarGenVARIABLETerminalRuleCall_1_0; }
	}

	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cCommandeAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cCommandeCommandParserRuleCall_0_0_0_0 = (RuleCall)cCommandeAssignment_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cCommandeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommandeCommandParserRuleCall_1_0 = (RuleCall)cCommandeAssignment_1.eContents().get(0);
		
		////Commandes
		//Commands:
		//	=> (commande+=Command ";")* commande+=Command;
		@Override public ParserRule getRule() { return rule; }

		//=> (commande+=Command ";")* commande+=Command
		public Group getGroup() { return cGroup; }

		//=> (commande+=Command ";")*
		public Group getGroup_0() { return cGroup_0; }

		//commande+=Command ";"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//commande+=Command
		public Assignment getCommandeAssignment_0_0_0() { return cCommandeAssignment_0_0_0; }

		//Command
		public RuleCall getCommandeCommandParserRuleCall_0_0_0_0() { return cCommandeCommandParserRuleCall_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_0_1() { return cSemicolonKeyword_0_0_1; }

		//commande+=Command
		public Assignment getCommandeAssignment_1() { return cCommandeAssignment_1; }

		//Command
		public RuleCall getCommandeCommandParserRuleCall_1_0() { return cCommandeCommandParserRuleCall_1_0; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNopAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNopNopKeyword_0_0 = (Keyword)cNopAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVarsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVarsVarsParserRuleCall_1_0_0 = (RuleCall)cVarsAssignment_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExprsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprsExprsParserRuleCall_1_2_0 = (RuleCall)cExprsAssignment_1_2.eContents().get(0);
		private final Assignment cCmdWhileAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCmdWhileCommandWhileParserRuleCall_2_0 = (RuleCall)cCmdWhileAssignment_2.eContents().get(0);
		private final Assignment cCmdIfAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCmdIfCommandIfParserRuleCall_3_0 = (RuleCall)cCmdIfAssignment_3.eContents().get(0);
		private final Assignment cCmdForEachAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cCmdForEachCommandForEachParserRuleCall_4_0 = (RuleCall)cCmdForEachAssignment_4.eContents().get(0);
		
		////Les commandes dans cet ordre: nop; Affectation; While; If; ForEach
		//Command:
		//	nop="nop" | vars=Vars ":=" exprs=Exprs | cmdWhile=CommandWhile | cmdIf=CommandIf | cmdForEach=CommandForEach;
		@Override public ParserRule getRule() { return rule; }

		//nop="nop" | vars=Vars ":=" exprs=Exprs | cmdWhile=CommandWhile | cmdIf=CommandIf | cmdForEach=CommandForEach
		public Alternatives getAlternatives() { return cAlternatives; }

		//nop="nop"
		public Assignment getNopAssignment_0() { return cNopAssignment_0; }

		//"nop"
		public Keyword getNopNopKeyword_0_0() { return cNopNopKeyword_0_0; }

		//vars=Vars ":=" exprs=Exprs
		public Group getGroup_1() { return cGroup_1; }

		//vars=Vars
		public Assignment getVarsAssignment_1_0() { return cVarsAssignment_1_0; }

		//Vars
		public RuleCall getVarsVarsParserRuleCall_1_0_0() { return cVarsVarsParserRuleCall_1_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }

		//exprs=Exprs
		public Assignment getExprsAssignment_1_2() { return cExprsAssignment_1_2; }

		//Exprs
		public RuleCall getExprsExprsParserRuleCall_1_2_0() { return cExprsExprsParserRuleCall_1_2_0; }

		//cmdWhile=CommandWhile
		public Assignment getCmdWhileAssignment_2() { return cCmdWhileAssignment_2; }

		//CommandWhile
		public RuleCall getCmdWhileCommandWhileParserRuleCall_2_0() { return cCmdWhileCommandWhileParserRuleCall_2_0; }

		//cmdIf=CommandIf
		public Assignment getCmdIfAssignment_3() { return cCmdIfAssignment_3; }

		//CommandIf
		public RuleCall getCmdIfCommandIfParserRuleCall_3_0() { return cCmdIfCommandIfParserRuleCall_3_0; }

		//cmdForEach=CommandForEach
		public Assignment getCmdForEachAssignment_4() { return cCmdForEachAssignment_4; }

		//CommandForEach
		public RuleCall getCmdForEachCommandForEachParserRuleCall_4_0() { return cCmdForEachCommandForEachParserRuleCall_4_0; }
	}

	public class CommandWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommandWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cWAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cWWhileKeyword_0_0_0 = (Keyword)cWAssignment_0_0.eContents().get(0);
		private final Keyword cForKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCmdsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCmdsCommandsParserRuleCall_3_0 = (RuleCall)cCmdsAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CommandWhile:
		//	(w="while" | "for") expr=Expr "do" cmds=Commands "od";
		@Override public ParserRule getRule() { return rule; }

		//(w="while" | "for") expr=Expr "do" cmds=Commands "od"
		public Group getGroup() { return cGroup; }

		//w="while" | "for"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//w="while"
		public Assignment getWAssignment_0_0() { return cWAssignment_0_0; }

		//"while"
		public Keyword getWWhileKeyword_0_0_0() { return cWWhileKeyword_0_0_0; }

		//"for"
		public Keyword getForKeyword_0_1() { return cForKeyword_0_1; }

		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }

		//"do"
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }

		//cmds=Commands
		public Assignment getCmdsAssignment_3() { return cCmdsAssignment_3; }

		//Commands
		public RuleCall getCmdsCommandsParserRuleCall_3_0() { return cCmdsCommandsParserRuleCall_3_0; }

		//"od"
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}

	public class CommandIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommandIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCmdsThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCmdsThenCommandsParserRuleCall_3_0 = (RuleCall)cCmdsThenAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCmdsElseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCmdsElseCommandsParserRuleCall_4_1_0 = (RuleCall)cCmdsElseAssignment_4_1.eContents().get(0);
		private final Keyword cFiKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CommandIf:
		//	"if" cond=Expr "then" cmdsThen=Commands ("else" cmdsElse=Commands)? "fi";
		@Override public ParserRule getRule() { return rule; }

		//"if" cond=Expr "then" cmdsThen=Commands ("else" cmdsElse=Commands)? "fi"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }

		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//cmdsThen=Commands
		public Assignment getCmdsThenAssignment_3() { return cCmdsThenAssignment_3; }

		//Commands
		public RuleCall getCmdsThenCommandsParserRuleCall_3_0() { return cCmdsThenCommandsParserRuleCall_3_0; }

		//("else" cmdsElse=Commands)?
		public Group getGroup_4() { return cGroup_4; }

		//"else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }

		//cmdsElse=Commands
		public Assignment getCmdsElseAssignment_4_1() { return cCmdsElseAssignment_4_1; }

		//Commands
		public RuleCall getCmdsElseCommandsParserRuleCall_4_1_0() { return cCmdsElseCommandsParserRuleCall_4_1_0; }

		//"fi"
		public Keyword getFiKeyword_5() { return cFiKeyword_5; }
	}

	public class CommandForEachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommandForEach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElemExprParserRuleCall_1_0 = (RuleCall)cElemAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnsembAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnsembExprParserRuleCall_3_0 = (RuleCall)cEnsembAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCmdsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCmdsCommandsParserRuleCall_5_0 = (RuleCall)cCmdsAssignment_5.eContents().get(0);
		private final Keyword cOdKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CommandForEach:
		//	"foreach" elem=Expr "in" ensemb=Expr "do" cmds=Commands "od";
		@Override public ParserRule getRule() { return rule; }

		//"foreach" elem=Expr "in" ensemb=Expr "do" cmds=Commands "od"
		public Group getGroup() { return cGroup; }

		//"foreach"
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }

		//elem=Expr
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }

		//Expr
		public RuleCall getElemExprParserRuleCall_1_0() { return cElemExprParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//ensemb=Expr
		public Assignment getEnsembAssignment_3() { return cEnsembAssignment_3; }

		//Expr
		public RuleCall getEnsembExprParserRuleCall_3_0() { return cEnsembExprParserRuleCall_3_0; }

		//"do"
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }

		//cmds=Commands
		public Assignment getCmdsAssignment_5() { return cCmdsAssignment_5; }

		//Commands
		public RuleCall getCmdsCommandsParserRuleCall_5_0() { return cCmdsCommandsParserRuleCall_5_0; }

		//"od"
		public Keyword getOdKeyword_6() { return cOdKeyword_6; }
	}

	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cExpGenAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExpGenExprParserRuleCall_0_0_0_0 = (RuleCall)cExpGenAssignment_0_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cExpGenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpGenExprParserRuleCall_1_0 = (RuleCall)cExpGenAssignment_1.eContents().get(0);
		
		////Expression
		//Exprs:
		//	=> (expGen+=Expr ",")* expGen+=Expr;
		@Override public ParserRule getRule() { return rule; }

		//=> (expGen+=Expr ",")* expGen+=Expr
		public Group getGroup() { return cGroup; }

		//=> (expGen+=Expr ",")*
		public Group getGroup_0() { return cGroup_0; }

		//expGen+=Expr ","
		public Group getGroup_0_0() { return cGroup_0_0; }

		//expGen+=Expr
		public Assignment getExpGenAssignment_0_0_0() { return cExpGenAssignment_0_0_0; }

		//Expr
		public RuleCall getExpGenExprParserRuleCall_0_0_0_0() { return cExpGenExprParserRuleCall_0_0_0_0; }

		//","
		public Keyword getCommaKeyword_0_0_1() { return cCommaKeyword_0_0_1; }

		//expGen+=Expr
		public Assignment getExpGenAssignment_1() { return cExpGenAssignment_1; }

		//Expr
		public RuleCall getExpGenExprParserRuleCall_1_0() { return cExpGenExprParserRuleCall_1_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExprSimpAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExprSimpExprSimpleParserRuleCall_0_0_0 = (RuleCall)cExprSimpAssignment_0_0.eContents().get(0);
		private final Assignment cExprAndAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprAndExprAndParserRuleCall_1_0 = (RuleCall)cExprAndAssignment_1.eContents().get(0);
		
		////Utilisation de => pour eviter le message d'erreur langage non LL(*)
		//Expr:
		//	=> (exprSimp=ExprSimple) | exprAnd=ExprAnd;
		@Override public ParserRule getRule() { return rule; }

		//=> (exprSimp=ExprSimple) | exprAnd=ExprAnd
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> (exprSimp=ExprSimple)
		public Group getGroup_0() { return cGroup_0; }

		//exprSimp=ExprSimple
		public Assignment getExprSimpAssignment_0_0() { return cExprSimpAssignment_0_0; }

		//ExprSimple
		public RuleCall getExprSimpExprSimpleParserRuleCall_0_0_0() { return cExprSimpExprSimpleParserRuleCall_0_0_0; }

		//exprAnd=ExprAnd
		public Assignment getExprAndAssignment_1() { return cExprAndAssignment_1; }

		//ExprAnd
		public RuleCall getExprAndExprAndParserRuleCall_1_0() { return cExprAndExprAndParserRuleCall_1_0; }
	}

	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cNilAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cNilNilKeyword_0_0_0 = (Keyword)cNilAssignment_0_0.eContents().get(0);
		private final Assignment cVariAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cVariVARIABLETerminalRuleCall_0_1_0 = (RuleCall)cVariAssignment_0_1.eContents().get(0);
		private final Assignment cSymbAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cSymbSYMBOLTerminalRuleCall_0_2_0 = (RuleCall)cSymbAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprConsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprConsConsParserRuleCall_1_1_0 = (RuleCall)cExprConsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprHeadAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cExprHeadHdKeyword_2_1_0 = (Keyword)cExprHeadAssignment_2_1.eContents().get(0);
		private final Assignment cExprHeadAttAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExprHeadAttExprParserRuleCall_2_2_0 = (RuleCall)cExprHeadAttAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExprTailAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cExprTailTlKeyword_3_1_0 = (Keyword)cExprTailAssignment_3_1.eContents().get(0);
		private final Assignment cExprTailAttAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExprTailAttExprParserRuleCall_3_2_0 = (RuleCall)cExprTailAttAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNomSymbAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNomSymbSYMBOLTerminalRuleCall_4_1_0 = (RuleCall)cNomSymbAssignment_4_1.eContents().get(0);
		private final Assignment cSymbAttAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cSymbAttExprParserRuleCall_4_2_0 = (RuleCall)cSymbAttAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		////Expression simple dans cet ordre: nil; variable; symbole;
		//ExprSimple:
		//	(nil="nil" | vari=VARIABLE | symb=SYMBOL) // '(' (exprList = List)')' |
		//	| "(" exprCons=Cons ")" | "(" exprHead="hd" exprHeadAtt=Expr ")" | "(" exprTail="tl" exprTailAtt=Expr ")" | "("
		//	nomSymb=SYMBOL symbAtt+=Expr+ ")";
		@Override public ParserRule getRule() { return rule; }

		//(nil="nil" | vari=VARIABLE | symb=SYMBOL) // '(' (exprList = List)')' |
		//| "(" exprCons=Cons ")" | "(" exprHead="hd" exprHeadAtt=Expr ")" | "(" exprTail="tl" exprTailAtt=Expr ")" | "("
		//nomSymb=SYMBOL symbAtt+=Expr+ ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//nil="nil" | vari=VARIABLE | symb=SYMBOL
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//nil="nil"
		public Assignment getNilAssignment_0_0() { return cNilAssignment_0_0; }

		//"nil"
		public Keyword getNilNilKeyword_0_0_0() { return cNilNilKeyword_0_0_0; }

		//vari=VARIABLE
		public Assignment getVariAssignment_0_1() { return cVariAssignment_0_1; }

		//VARIABLE
		public RuleCall getVariVARIABLETerminalRuleCall_0_1_0() { return cVariVARIABLETerminalRuleCall_0_1_0; }

		//symb=SYMBOL
		public Assignment getSymbAssignment_0_2() { return cSymbAssignment_0_2; }

		//SYMBOL
		public RuleCall getSymbSYMBOLTerminalRuleCall_0_2_0() { return cSymbSYMBOLTerminalRuleCall_0_2_0; }

		//"(" exprCons=Cons ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//exprCons=Cons
		public Assignment getExprConsAssignment_1_1() { return cExprConsAssignment_1_1; }

		//Cons
		public RuleCall getExprConsConsParserRuleCall_1_1_0() { return cExprConsConsParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//"(" exprHead="hd" exprHeadAtt=Expr ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//exprHead="hd"
		public Assignment getExprHeadAssignment_2_1() { return cExprHeadAssignment_2_1; }

		//"hd"
		public Keyword getExprHeadHdKeyword_2_1_0() { return cExprHeadHdKeyword_2_1_0; }

		//exprHeadAtt=Expr
		public Assignment getExprHeadAttAssignment_2_2() { return cExprHeadAttAssignment_2_2; }

		//Expr
		public RuleCall getExprHeadAttExprParserRuleCall_2_2_0() { return cExprHeadAttExprParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//"(" exprTail="tl" exprTailAtt=Expr ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//exprTail="tl"
		public Assignment getExprTailAssignment_3_1() { return cExprTailAssignment_3_1; }

		//"tl"
		public Keyword getExprTailTlKeyword_3_1_0() { return cExprTailTlKeyword_3_1_0; }

		//exprTailAtt=Expr
		public Assignment getExprTailAttAssignment_3_2() { return cExprTailAttAssignment_3_2; }

		//Expr
		public RuleCall getExprTailAttExprParserRuleCall_3_2_0() { return cExprTailAttExprParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//"(" nomSymb=SYMBOL symbAtt+=Expr+ ")"
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//nomSymb=SYMBOL
		public Assignment getNomSymbAssignment_4_1() { return cNomSymbAssignment_4_1; }

		//SYMBOL
		public RuleCall getNomSymbSYMBOLTerminalRuleCall_4_1_0() { return cNomSymbSYMBOLTerminalRuleCall_4_1_0; }

		//symbAtt+=Expr+
		public Assignment getSymbAttAssignment_4_2() { return cSymbAttAssignment_4_2; }

		//Expr
		public RuleCall getSymbAttExprParserRuleCall_4_2_0() { return cSymbAttExprParserRuleCall_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}

	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprOrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprOrExprOrParserRuleCall_0_0 = (RuleCall)cExprOrAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExprAndAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cExprAndAndKeyword_1_0_0 = (Keyword)cExprAndAssignment_1_0.eContents().get(0);
		private final Assignment cExprAndAttAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprAndAttExprAndParserRuleCall_1_1_0 = (RuleCall)cExprAndAttAssignment_1_1.eContents().get(0);
		
		////Expression ET
		//ExprAnd:
		//	exprOr=ExprOr (exprAnd="and" exprAndAtt=ExprAnd)?;
		@Override public ParserRule getRule() { return rule; }

		//exprOr=ExprOr (exprAnd="and" exprAndAtt=ExprAnd)?
		public Group getGroup() { return cGroup; }

		//exprOr=ExprOr
		public Assignment getExprOrAssignment_0() { return cExprOrAssignment_0; }

		//ExprOr
		public RuleCall getExprOrExprOrParserRuleCall_0_0() { return cExprOrExprOrParserRuleCall_0_0; }

		//(exprAnd="and" exprAndAtt=ExprAnd)?
		public Group getGroup_1() { return cGroup_1; }

		//exprAnd="and"
		public Assignment getExprAndAssignment_1_0() { return cExprAndAssignment_1_0; }

		//"and"
		public Keyword getExprAndAndKeyword_1_0_0() { return cExprAndAndKeyword_1_0_0; }

		//exprAndAtt=ExprAnd
		public Assignment getExprAndAttAssignment_1_1() { return cExprAndAttAssignment_1_1; }

		//ExprAnd
		public RuleCall getExprAndAttExprAndParserRuleCall_1_1_0() { return cExprAndAttExprAndParserRuleCall_1_1_0; }
	}

	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprNotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprNotExprNotParserRuleCall_0_0 = (RuleCall)cExprNotAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExprOrAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cExprOrOrKeyword_1_0_0 = (Keyword)cExprOrAssignment_1_0.eContents().get(0);
		private final Assignment cExprOrAttAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprOrAttExprOrParserRuleCall_1_1_0 = (RuleCall)cExprOrAttAssignment_1_1.eContents().get(0);
		
		////Expression OU
		//ExprOr:
		//	exprNot=ExprNot (exprOr="or" exprOrAtt=ExprOr)?;
		@Override public ParserRule getRule() { return rule; }

		//exprNot=ExprNot (exprOr="or" exprOrAtt=ExprOr)?
		public Group getGroup() { return cGroup; }

		//exprNot=ExprNot
		public Assignment getExprNotAssignment_0() { return cExprNotAssignment_0; }

		//ExprNot
		public RuleCall getExprNotExprNotParserRuleCall_0_0() { return cExprNotExprNotParserRuleCall_0_0; }

		//(exprOr="or" exprOrAtt=ExprOr)?
		public Group getGroup_1() { return cGroup_1; }

		//exprOr="or"
		public Assignment getExprOrAssignment_1_0() { return cExprOrAssignment_1_0; }

		//"or"
		public Keyword getExprOrOrKeyword_1_0_0() { return cExprOrOrKeyword_1_0_0; }

		//exprOrAtt=ExprOr
		public Assignment getExprOrAttAssignment_1_1() { return cExprOrAttAssignment_1_1; }

		//ExprOr
		public RuleCall getExprOrAttExprOrParserRuleCall_1_1_0() { return cExprOrAttExprOrParserRuleCall_1_1_0; }
	}

	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNotNotKeyword_0_0 = (Keyword)cNotAssignment_0.eContents().get(0);
		private final Assignment cExprEqAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprEqExprEqParserRuleCall_1_0 = (RuleCall)cExprEqAssignment_1.eContents().get(0);
		
		////Expression NOT
		//ExprNot:
		//	not="not"? exprEq=ExprEq;
		@Override public ParserRule getRule() { return rule; }

		//not="not"? exprEq=ExprEq
		public Group getGroup() { return cGroup; }

		//not="not"?
		public Assignment getNotAssignment_0() { return cNotAssignment_0; }

		//"not"
		public Keyword getNotNotKeyword_0_0() { return cNotNotKeyword_0_0; }

		//exprEq=ExprEq
		public Assignment getExprEqAssignment_1() { return cExprEqAssignment_1; }

		//ExprEq
		public RuleCall getExprEqExprEqParserRuleCall_1_0() { return cExprEqExprEqParserRuleCall_1_0; }
	}

	public class ExprEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprEq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_0_1_0 = (RuleCall)cExprAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExprSim1Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExprSim1ExprSimpleParserRuleCall_1_0_0 = (RuleCall)cExprSim1Assignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExprSim2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprSim2ExprSimpleParserRuleCall_1_2_0 = (RuleCall)cExprSim2Assignment_1_2.eContents().get(0);
		
		////Expression d'égalité conditionnelle
		//ExprEq:
		//	"(" expr=Expr ")" | exprSim1=ExprSimple "=?" exprSim2=ExprSimple;
		@Override public ParserRule getRule() { return rule; }

		//"(" expr=Expr ")" | exprSim1=ExprSimple "=?" exprSim2=ExprSimple
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" expr=Expr ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//expr=Expr
		public Assignment getExprAssignment_0_1() { return cExprAssignment_0_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_0_1_0() { return cExprExprParserRuleCall_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//exprSim1=ExprSimple "=?" exprSim2=ExprSimple
		public Group getGroup_1() { return cGroup_1; }

		//exprSim1=ExprSimple
		public Assignment getExprSim1Assignment_1_0() { return cExprSim1Assignment_1_0; }

		//ExprSimple
		public RuleCall getExprSim1ExprSimpleParserRuleCall_1_0_0() { return cExprSim1ExprSimpleParserRuleCall_1_0_0; }

		//"=?"
		public Keyword getEqualsSignQuestionMarkKeyword_1_1() { return cEqualsSignQuestionMarkKeyword_1_1; }

		//exprSim2=ExprSimple
		public Assignment getExprSim2Assignment_1_2() { return cExprSim2Assignment_1_2; }

		//ExprSimple
		public RuleCall getExprSim2ExprSimpleParserRuleCall_1_2_0() { return cExprSim2ExprSimpleParserRuleCall_1_2_0; }
	}

	public class ConsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cons");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprConsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cExprConsConsKeyword_0_0 = (Keyword)cExprConsAssignment_0.eContents().get(0);
		private final Assignment cExprConsAttListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprConsAttListExprParserRuleCall_1_0 = (RuleCall)cExprConsAttListAssignment_1.eContents().get(0);
		
		////Constructeur
		//Cons:
		//	exprCons="cons" exprConsAttList+=Expr+;
		@Override public ParserRule getRule() { return rule; }

		//exprCons="cons" exprConsAttList+=Expr+
		public Group getGroup() { return cGroup; }

		//exprCons="cons"
		public Assignment getExprConsAssignment_0() { return cExprConsAssignment_0; }

		//"cons"
		public Keyword getExprConsConsKeyword_0_0() { return cExprConsConsKeyword_0_0; }

		//exprConsAttList+=Expr+
		public Assignment getExprConsAttListAssignment_1() { return cExprConsAttListAssignment_1; }

		//Expr
		public RuleCall getExprConsAttListExprParserRuleCall_1_0() { return cExprConsAttListExprParserRuleCall_1_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final FunctionElements pFunction;
	private final DefinitionElements pDefinition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final VarsElements pVars;
	private final TerminalRule tVARIABLE;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final CommandWhileElements pCommandWhile;
	private final CommandIfElements pCommandIf;
	private final CommandForEachElements pCommandForEach;
	private final ExprsElements pExprs;
	private final ExprElements pExpr;
	private final ExprSimpleElements pExprSimple;
	private final ExprAndElements pExprAnd;
	private final ExprOrElements pExprOr;
	private final ExprNotElements pExprNot;
	private final ExprEqElements pExprEq;
	private final ConsElements pCons;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tLC;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WhileCppGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFunction = new FunctionElements();
		this.pDefinition = new DefinitionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pVars = new VarsElements();
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VARIABLE");
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pCommandWhile = new CommandWhileElements();
		this.pCommandIf = new CommandIfElements();
		this.pCommandForEach = new CommandForEachElements();
		this.pExprs = new ExprsElements();
		this.pExpr = new ExprElements();
		this.pExprSimple = new ExprSimpleElements();
		this.pExprAnd = new ExprAndElements();
		this.pExprOr = new ExprOrElements();
		this.pExprNot = new ExprNotElements();
		this.pExprEq = new ExprEqElements();
		this.pCons = new ConsElements();
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SYMBOL");
		this.tLC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LC");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.WhileCpp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Programme
	//Program:
	//	fonctions+=Function*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	////Fonction
	//Function:
	//	"function" nom=SYMBOL ":" definition=Definition;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	////Définition de fonction
	//Definition:
	//	"read" inputs=Input "%" commandes=Commands "%" "write" outputs=Output;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	////Input de la fonction
	//Input:
	//	(varIn+=VARIABLE ",")* varIn+=VARIABLE;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	////Output de la fonction
	////varOut = variables Sorties
	//Output:
	//	(varOut+=VARIABLE ",")* varOut+=VARIABLE;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}

	////Variables
	////varGen = variables générales
	//Vars:
	//	(varGen+=VARIABLE ",")* varGen+=VARIABLE;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}

	////Terminal représentant une seule variable
	//terminal VARIABLE:
	//	"A".."Z" ("A".."Z" | "a".."z" | "0".."9" | "->" | "-" | "+" | "&" | "." | "/" | "_")*;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	} 

	////Commandes
	//Commands:
	//	=> (commande+=Command ";")* commande+=Command;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}

	////Les commandes dans cet ordre: nop; Affectation; While; If; ForEach
	//Command:
	//	nop="nop" | vars=Vars ":=" exprs=Exprs | cmdWhile=CommandWhile | cmdIf=CommandIf | cmdForEach=CommandForEach;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//CommandWhile:
	//	(w="while" | "for") expr=Expr "do" cmds=Commands "od";
	public CommandWhileElements getCommandWhileAccess() {
		return pCommandWhile;
	}
	
	public ParserRule getCommandWhileRule() {
		return getCommandWhileAccess().getRule();
	}

	//CommandIf:
	//	"if" cond=Expr "then" cmdsThen=Commands ("else" cmdsElse=Commands)? "fi";
	public CommandIfElements getCommandIfAccess() {
		return pCommandIf;
	}
	
	public ParserRule getCommandIfRule() {
		return getCommandIfAccess().getRule();
	}

	//CommandForEach:
	//	"foreach" elem=Expr "in" ensemb=Expr "do" cmds=Commands "od";
	public CommandForEachElements getCommandForEachAccess() {
		return pCommandForEach;
	}
	
	public ParserRule getCommandForEachRule() {
		return getCommandForEachAccess().getRule();
	}

	////Expression
	//Exprs:
	//	=> (expGen+=Expr ",")* expGen+=Expr;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}

	////Utilisation de => pour eviter le message d'erreur langage non LL(*)
	//Expr:
	//	=> (exprSimp=ExprSimple) | exprAnd=ExprAnd;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	////Expression simple dans cet ordre: nil; variable; symbole;
	//ExprSimple:
	//	(nil="nil" | vari=VARIABLE | symb=SYMBOL) // '(' (exprList = List)')' |
	//	| "(" exprCons=Cons ")" | "(" exprHead="hd" exprHeadAtt=Expr ")" | "(" exprTail="tl" exprTailAtt=Expr ")" | "("
	//	nomSymb=SYMBOL symbAtt+=Expr+ ")";
	public ExprSimpleElements getExprSimpleAccess() {
		return pExprSimple;
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}

	////Expression ET
	//ExprAnd:
	//	exprOr=ExprOr (exprAnd="and" exprAndAtt=ExprAnd)?;
	public ExprAndElements getExprAndAccess() {
		return pExprAnd;
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}

	////Expression OU
	//ExprOr:
	//	exprNot=ExprNot (exprOr="or" exprOrAtt=ExprOr)?;
	public ExprOrElements getExprOrAccess() {
		return pExprOr;
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}

	////Expression NOT
	//ExprNot:
	//	not="not"? exprEq=ExprEq;
	public ExprNotElements getExprNotAccess() {
		return pExprNot;
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}

	////Expression d'égalité conditionnelle
	//ExprEq:
	//	"(" expr=Expr ")" | exprSim1=ExprSimple "=?" exprSim2=ExprSimple;
	public ExprEqElements getExprEqAccess() {
		return pExprEq;
	}
	
	public ParserRule getExprEqRule() {
		return getExprEqAccess().getRule();
	}

	////Constructeur
	//Cons:
	//	exprCons="cons" exprConsAttList+=Expr+;
	public ConsElements getConsAccess() {
		return pCons;
	}
	
	public ParserRule getConsRule() {
		return getConsAccess().getRule();
	}

	////List: (exprList = 'list') (exprListAtt1 = Expr) (exprListAttList = ListAttList);
	////ListAttList:listList += Expr;
	////Terminal représentant un symbole
	//terminal SYMBOL:
	//	"a".."z" ("A".."Z" | "a".."z" | "0".."9" | "_" | "->" | "-" | "+" | "&" | "." | "/")*;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	} 

	////Layout character
	//terminal LC:
	//	" "*;
	public TerminalRule getLCRule() {
		return tLC;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
