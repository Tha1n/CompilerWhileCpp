grammar org.xtext.example.WhileCpp with org.eclipse.xtext.common.Terminals

hidden(LC, WS, ML_COMMENT, SL_COMMENT)

generate whileCpp "http://www.xtext.org/example/WhileCpp"


Program: (fonctions+=Function )*;

Function: 'function' nom=SYMBOL ':' definition=Definition;
Definition:
'read' inputs=Input 
'%' commandes=Commands 
'%' 'write' outputs=Output;

Input: (varIn+=VARIABLE ',')*(varIn+=VARIABLE); //varIn = variables Entrée
//Permet de reconnaitre des chaines de la forme var1,var2 ou var
Output: (varOut+=VARIABLE ',')*(varOut+=VARIABLE); //varOut = variables Sorties

Vars: (varGen += VARIABLE',')* (varGen += VARIABLE); //varGen = variables générales
terminal VARIABLE: ('A'..'Z') (('A'..'Z')|('a'..'z')|('0'..'9')|'_')*;

//Une variable commence par une majuscule et est suivi par une lettre, ou chiffre, ou _
Commands: =>(commande += Command ';')*(commande += Command);
//Permet de reconnaitre des chaines de la forme c1;c2
//Les differentes commandes
Command: ( nop ='nop' | vars = Vars ':=' (exprs=Exprs) | cmdWhile = CommandWhile | cmdIf = CommandIf | cmdForEach = CommandForEach);
CommandWhile: (w='while'|'for') expr = Expr 'do' cmds = Commands 'od';
CommandIf: 'if' cond = Expr 'then' cmdsThen = Commands ('else' (cmdsElse = Commands) )? 'fi';
CommandForEach: 'foreach' elem = Expr 'in' ensemb = Expr 'do' cmds = Commands 'od';

Exprs: =>(expGen += Expr',')* (expGen += Expr);
//Utilisation de => pour eviter le message d'erreur langage non LL(*)
Expr: =>(exprSimp = ExprSimple) | (exprAnd = ExprAnd);
ExprSimple: (nil = 'nil' | vari = VARIABLE | symb = SYMBOL ) |
'(' (exprCons = 'cons') (exprConsAtt = Expr) ')' | '(' (exprList = 'list') (exprListAtt = Expr) ')' |
'(' (exprHead = 'hd') (exprHeadAtt = Expr) ')' | '(' (exprTail = 'tl') (exprTailAtt = Expr) ')' |
'(' (nomSymb = SYMBOL) (symbAtt = Expr) ')';
ExprAnd: (exprOr = ExprOr) ((exprAnd = 'and') (exprAndAtt = ExprAnd))?;
ExprOr: (exprNot = ExprNot) ((exprOr = 'or') (exprOrAtt = ExprOr))?;
ExprNot: ((not = 'not'))? (exprEq = ExprEq);
ExprEq: '('(expr = Expr)')' | (exprSim1 = ExprSimple)'=?'(exprSim2 = ExprSimple);

terminal SYMBOL: ('a'..'z') (('A'..'Z')|('a'..'z')|('0'..'9')|'_')*;
//Un symbole est compose d'une minuscule suivie de lettres, chiffres ou _



terminal LC: (' ')*;
//Caracteres de separations
